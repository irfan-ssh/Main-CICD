name: CD_stage
on:
  workflow_call:
    # inputs:
    #   AWS_ROLE_ARN:
    #     required: true
    #     type: string
    #   AWS_REGION:
    #     required: true
    #     type: string
      secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true
      SSH_PRIVATE_KEY:
        required: true
jobs:
  terragrunt:
    name: "Apply Terraform with Terragrunt"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/irfan-ssh/terragrunt-docker-image:latest # Replace with your actual image

    env:
      TERRAGRUNT_TFPATH: /usr/local/bin/terraform
      tf_working_dir: './live/stg'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .ssh directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Remove old GitHub key from known_hosts
        run: |
          ssh-keygen -R github.com

      - name: Add new GitHub key to known_hosts
        run: |
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Verify Terraform and Terragrunt Installation
        run: |
          tfenv install 1.8.5
          tgenv install 0.60.0
          tfenv use 1.8.5
          tgenv use 0.60.0
          terraform --version
          terragrunt --version
        working-directory: ${{ env.tf_working_dir }}

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terragrunt Init
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terragrunt run-all init -terragrunt-provider-cache -no-color --terragrunt-non-interactive
      - name: Terragrunt Plan
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terragrunt run-all plan -terragrunt-provider-cache -no-color -out=plan.output --terragrunt-non-interactive

      - name: Terragrunt Apply
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terragrunt run-all apply -terragrunt-provider-cache -no-color plan.output --terragrunt-non-interactive

      - name: List Folder
        working-directory: ${{ env.tf_working_dir }}
        run: |
          ls -al

      - name: Clean up Terraform State
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terragrunt run-all refresh
          rm -rf .terraform
