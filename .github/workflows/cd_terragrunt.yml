name: CD_stage
'on':
  workflow_call:
    inputs:
      STAGING_ACCOUNT_ID:
        required: true
        type: string
      PRODUCTION_ACCOUNT_ID:
        required: true
        type: string
      ENABLE_PROD:
        required: false
        type: string
      GHACTION_ROLE_NAME:
        required: false
        type: string
        default: github-oidc-role
      DIRECTORY_PATH:
        required: true
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true
      SSH_PRIVATE_KEY:
        required: true
jobs:
  terragrunt:
    name: Apply Terraform with Terragrunt
    runs-on: ubuntu-latest
    container:
      image: 'ghcr.io/irfan-ssh/terragrunt-docker-image:latest'
    env:
      TERRAGRUNT_TFPATH: /usr/local/bin/terraform
      tf_working_dir: '${{ inputs.DIRECTORY_PATH }}'
    permissions:
      id-token: write
      contents: read
    steps:
      # Repository checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # Terraform Setup
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Terraform Version
      - name: Set Terragrunt and Terraform Versions from .terragrunt-version and .terraform-version
        run: |
          TERRAGRUNT_VERSION=$(cat .terragrunt-version)
          echo "Using Terragrunt version: $TERRAGRUNT_VERSION"
          tgenv install $TERRAGRUNT_VERSION
          tgenv use $TERRAGRUNT_VERSION
          terragrunt --version

          TERRAFORM_VERSION=$(cat .terraform-version)
          echo "Using Terraform version: $TERRAFORM_VERSION"
          tfenv install $TERRAFORM_VERSION
          tfenv use $TERRAFORM_VERSION
          terraform --version
        working-directory: ./

        # AWS Credentials
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: >-
            arn:aws:iam::${{ inputs.STAGING_ACCOUNT_ID }}:role/${{ inputs.GHACTION_ROLE_NAME }}
          role-session-name: GitHubActions
          aws-region: '${{ secrets.AWS_REGION }}'

      - name: TERRAGRUNT INIT
        run: |
          echo "current working directory path:"
          terragrunt run-all init -terragrunt-provider-cache --terragrunt-non-interactive
          echo "Terragrunt run-all init completed."
        working-directory: '${{ env.tf_working_dir }}'
          
      # Terraform Plan
      # - name: TERRAGRUNT PLAN
      #   run: |
      #     echo "current working directory path:"
      #     terragrunt run-all plan -terragrunt-provider-cache --terragrunt-non-interactive -out=plan.output
      #   working-directory: '${{ env.tf_working_dir }}'

      # - name: TERRAGRUNT APPLY
      #   run: |
      #     echo "current working directory path:"
      #     terragrunt run-all apply -terragrunt-provider-cache --terragrunt-non-interactive plan.output
      #     echo "Terragrunt apply completed."
      #   working-directory: '${{ env.tf_working_dir }}'

      - name: Download plan artifact
        env:
          GH_TOKEN: ${{ secrets.PAT_WITH_ARTIFACT_ACCESS }}  # Use a PAT with necessary permissions
        run: |
          REPO="${GITHUB_REPOSITORY}"
          RUN_ID="${{ github.event.workflow_run.id }}"
          
          echo "Fetching artifacts for workflow run: $RUN_ID"
          ARTIFACTS=$(gh api /repos/$REPO/actions/runs/$RUN_ID/artifacts)
          echo "Artifacts response: $ARTIFACTS"
          
          ARTIFACT_ID=$(echo $ARTIFACTS | jq -r '.artifacts[] | select(.name=="terragrunt-plan") | .id')
          
          if [ -z "$ARTIFACT_ID" ]; then
            echo "No terragrunt-plan artifact found"
            exit 1
          fi
          
          echo "Downloading artifact ID: $ARTIFACT_ID"
          gh api /repos/$REPO/actions/artifacts/$ARTIFACT_ID/zip -H "Accept: application/vnd.github+json" --output artifact.zip
          
          unzip artifact.zip -d ${{ env.tf_working_dir }}
          rm artifact.zip
        working-directory: ${{ github.workspace }}

      - name: TERRAGRUNT APPLY
        run: |
          terragrunt run-all apply -no-color --terragrunt-non-interactive plan_output | tee apply.output
        working-directory: '${{ env.tf_working_dir }}'
        
      - name: Clean up Terraform State
        run: |
          terragrunt run-all refresh
          rm -rf .terraform
        working-directory: '${{ env.tf_working_dir }}'
