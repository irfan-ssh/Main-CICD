name: CD_stage

on:
  workflow_call:
    inputs:
      STAGING_ACCOUNT_ID:
        required: true
        type: string
      PRODUCTION_ACCOUNT_ID:
        required: true
        type: string
      ENABLE_PROD:
        required: false
        type: string
      GHACTION_ROLE_NAME:
        required: false
        type: string
        default: 'github-oidc-role'
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  terragrunt:
    name: "Apply Terraform with Terragrunt"
    runs-on: ubuntu-latest
    container:
      image: 'ghcr.io/irfan-ssh/terragrunt-docker-image:latest'

    env:
      TERRAGRUNT_TFPATH: /usr/local/bin/terraform
      tf_working_dir: './live/stg'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # SSH setup steps are commented out because they are not needed
      # for public repositories, but you can uncomment if needed.
      # - name: Set up SSH
      #   uses: webfactory/ssh-agent@v0.5.3
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Verify Terraform and Terragrunt Installation
        run: |
          tfenv install 1.8.5
          tgenv install 0.60.0
          tfenv use 1.8.5
          tgenv use 0.60.0
          terraform --version
          terragrunt --version
        working-directory: '${{ env.tf_working_dir }}'

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.STAGING_ACCOUNT_ID }}:role/${{ inputs.GHACTION_ROLE_NAME }}
          role-session-name: GitHubActions
          aws-region: '${{ secrets.AWS_REGION }}'

      - name: TERRAGRUNT INIT
        run: |
          pwd
          echo "current working directory path:"
          terragrunt run-all init -terragrunt-provider-cache --terragrunt-non-interactive
          echo "Terragrunt init completed."
          pwd
          ls -ashl
          echo "Searching for .terragrunt cache..."
        working-directory: '${{ env.tf_working_dir }}'

      - name: TERRAGRUNT PLAN
        run: |
          pwd
          echo "current working directory path:"
          terragrunt run-all plan -terragrunt-provider-cache --terragrunt-non-interactive -out=plan.output
          echo "Terragrunt plan completed."
          pwd
          ls -ashl
          echo "Searching for plan.output..."
        working-directory: '${{ env.tf_working_dir }}'

      - name: TERRAGRUNT APPLY
        run: |
          pwd
          echo "current working directory path:"
          terragrunt run-all apply -terragrunt-provider-cache --terragrunt-non-interactive plan.output
          echo "Terragrunt apply completed."
          pwd
          ls -ashl
        working-directory: '${{ env.tf_working_dir }}'

      - name: List Folder
        run: |
          ls -al
        working-directory: '${{ env.tf_working_dir }}'

      - name: Clean up Terraform State
        run: |
          terragrunt run-all refresh
          rm -rf .terraform
        working-directory: '${{ env.tf_working_dir }}'
