name: CI_stage
'on':
  workflow_call:
    inputs:
      STAGING_ACCOUNT_ID:
        required: true
        type: string
      PRODUCTION_ACCOUNT_ID:
        required: true
        type: string
      ENABLE_PROD:
        required: false
        type: string
      GHACTION_ROLE_NAME:
        required: false
        type: string
        default: github-oidc-role
      DIRECTORY_PATH:
        required: true
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true
      SSH_PRIVATE_KEY:
        required: true
jobs:
  terragrunt:
    name: Terraform with Terragrunt
    runs-on: ubuntu-latest
    container:
      image: 'ghcr.io/irfan-ssh/terragrunt-docker-image:latest'
    env:
      TERRAGRUNT_TFPATH: /usr/local/bin/terraform
      tf_working_dir: '${{ inputs.DIRECTORY_PATH }}'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: >-
          Set Terragrunt and Terraform Versions from .terragrunt-version and
          .terraform-version
        run: |
          TERRAGRUNT_VERSION=$(cat .terragrunt-version)
          echo "Using Terragrunt version: $TERRAGRUNT_VERSION"
          tgenv install $TERRAGRUNT_VERSION
          tgenv use $TERRAGRUNT_VERSION
          terragrunt --version

          TERRAFORM_VERSION=$(cat .terraform-version)
          echo "Using Terraform version: $TERRAFORM_VERSION"
          tfenv install $TERRAFORM_VERSION
          tfenv use $TERRAFORM_VERSION
          terraform --version
        working-directory: ./
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: >-
            arn:aws:iam::${{ inputs.STAGING_ACCOUNT_ID }}:role/${{
            inputs.GHACTION_ROLE_NAME }}
          role-session-name: GitHubActions
          aws-region: '${{ secrets.AWS_REGION }}'
      - name: Run HCL Format
        run: |
          terragrunt run-all hclfmt
        working-directory: '${{ env.tf_working_dir }}'
      - name: TERRAGRUNT INIT
        run: >
          pwd

          echo "current working directory path:"

          terragrunt run-all init -terragrunt-provider-cache
          --terragrunt-non-interactive

          echo "Terragrunt init completed."

          pwd

          ls -ashl

          echo "Searching for .terragrunt cache..."
        working-directory: '${{ env.tf_working_dir }}'
      # - name: TERRAGRUNT PLAN
      #   run: >
      #     pwd

      #     echo "current working direcotry path::"

      #     pwd

      #     terragrunt run-all plan -no-color -out=plan.output --terragrunt-non-interactive
      #     # terragrunt show -no-color plan.output >> plan_output
      #     echo "current working direcotry path::"

      #     pwd

      #     ls -ashl

      #     echo "Searching for plan.output..."
      #   working-directory: '${{ env.tf_working_dir }}'

      - name: TERRAGRUNT PLAN, SHOW, AND MERGE OUTPUTS
        run: |
          base_dir='${{ env.tf_working_dir }}'
          
          # Ensure the base directory exists
          mkdir -p "$base_dir"
          
          # Run Terragrunt plan command
          terragrunt run-all plan -no-color -out=plan.output --terragrunt-non-interactive
          
          # Clear or create the final plan_output file
          touch "$base_dir/plan_output"
          > "$base_dir/plan_output"
          
          # Find all directories with plan.output files and run terragrunt show
          find . -name "plan.output" | while read -r file; do
            plan_dir=$(dirname "$file")
            echo "Processing plan in: $plan_dir"
            
            # Navigate to the directory containing the plan.output
            cd "$plan_dir"
            
            # Run terragrunt show and append output to plan_output in live/stg
            terragrunt show -no-color plan.output >> "$base_dir/plan_output"
            
            # Add a separator for clarity between different plans
            echo -e "\n\n------------------------\n\n" >> "$base_dir/plan_output"
            
            # Go back to the root directory
            cd - > /dev/null
          done
          
          # Display the final combined output
          echo "Final Combined Terragrunt Output:"
          cat "$base_dir/plan_output"
        
        shell: bash
        working-directory: '${{ env.tf_working_dir }}'
