name: CI_stage
'on':
  workflow_call:
    inputs:
      STAGING_ACCOUNT_ID:
        required: true
        type: string
      PRODUCTION_ACCOUNT_ID:
        required: true
        type: string
      ENABLE_PROD:
        required: false
        type: string
      GHACTION_ROLE_NAME:
        required: false
        type: string
        default: github-oidc-role
      DIRECTORY_PATH:
        required: true
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true
      SSH_PRIVATE_KEY:
        required: true
jobs:
  terragrunt:
    name: Terraform with Terragrunt
    runs-on: ubuntu-latest
    container:
      image: 'ghcr.io/irfan-ssh/terragrunt-docker-image:latest'
    env:
      TERRAGRUNT_TFPATH: /usr/local/bin/terraform
      tf_working_dir: '${{ inputs.DIRECTORY_PATH }}'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: >-
          Set Terragrunt and Terraform Versions from .terragrunt-version and
          .terraform-version
        run: |
          TERRAGRUNT_VERSION=$(cat .terragrunt-version)
          echo "Using Terragrunt version: $TERRAGRUNT_VERSION"
          tgenv install $TERRAGRUNT_VERSION
          tgenv use $TERRAGRUNT_VERSION
          terragrunt --version

          TERRAFORM_VERSION=$(cat .terraform-version)
          echo "Using Terraform version: $TERRAFORM_VERSION"
          tfenv install $TERRAFORM_VERSION
          tfenv use $TERRAFORM_VERSION
          terraform --version
        working-directory: ./
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: >-
            arn:aws:iam::${{ inputs.STAGING_ACCOUNT_ID }}:role/${{
            inputs.GHACTION_ROLE_NAME }}
          role-session-name: GitHubActions
          aws-region: '${{ secrets.AWS_REGION }}'
      - name: Run HCL Format
        run: |
          terragrunt run-all hclfmt
        working-directory: '${{ env.tf_working_dir }}'
      - name: TERRAGRUNT INIT
        run: >
          pwd

          echo "current working directory path:"

          terragrunt run-all init -terragrunt-provider-cache
          --terragrunt-non-interactive

          echo "Terragrunt init completed."

          pwd

          ls -ashl

          echo "Searching for .terragrunt cache..."
        working-directory: '${{ env.tf_working_dir }}'
      - name: TERRAGRUNT PLAN
        run: >
          pwd

          echo "current working direcotry path::"

          pwd

          terragrunt run-all plan -no-color -out=plan.output --terragrunt-non-interactive
          # terragrunt show -no-color plan.output >> plan_output
          echo "current working direcotry path::"

          pwd

          ls -ashl

          echo "Searching for plan.output..."
        working-directory: '${{ env.tf_working_dir }}'
      # - name: FIND PLAN OUTPUT
      #   run: |
      #     echo "Searching for plan.output file..."
      #     find . -name "plan.output" -print
      #   working-directory: '${{ env.tf_working_dir }}'

      # - name: COPY AND MERGE PLAN OUTPUTS
      #   run: |
      #     # Define the base directory from the environment variable
      #     base_dir='${{ env.tf_working_dir }}'
          
      #     # Print the base directory to verify it's correct
      #     echo "Base directory is: $base_dir"
          
      #     # Ensure the base directory exists
      #     mkdir -p "$base_dir"
          
      #     # Create or clear the mainplan.output file
      #     touch "$base_dir/mainplan.output"
      #     > "$base_dir/mainplan.output"
          
      #     # Find all plan.output files and copy their content to the mainplan.output file
      #     find . -name "plan.output" -exec sh -c '
      #       for file_path do
      #         # Append the content of each plan.output to the mainplan.output
      #         cat "$file_path" >> "$base_dir/mainplan.output"
      #         echo "\n\n# Content from $file_path\n" >> "$base_dir/mainplan.output"
      #       done
      #     ' sh {} +
        
      #   shell: sh -e {0}
      - name: FIND, COPY, AND MERGE PLAN OUTPUTS
        run: |
          base_dir='${{ env.tf_working_dir }}'
          
          # Ensure the base directory exists
          mkdir -p "$base_dir"
          
          # Create or clear the mainplan.output file
          > "$base_dir/mainplan.output"
          
          # Find all plan.output files and merge their content into mainplan.output
          find . -name "plan.output" | while read -r file; do
            echo "Processing: $file" >> "$base_dir/mainplan.output"
            echo "------------------------" >> "$base_dir/mainplan.output"
            cat "$file" >> "$base_dir/mainplan.output"
            echo -e "\n\n" >> "$base_dir/mainplan.output"
          done
          
          # Optional: List the contents of the mainplan.output file
          echo "Contents of mainplan.output:"
          cat -no-color "$base_dir/mainplan.output"
        
        shell: bash
        working-directory: '${{ env.tf_working_dir }}'
